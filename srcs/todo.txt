Request/Body Parsing and File Upload Module:
Modify or create additional files to handle multipart/form-data parsing, file upload storage, and request size limits.
What should i modify or create in order to successful this ?
ChatGPT said:

To successfully handle multipart/form-data parsing, file upload storage, and request size limits, you'll need to both extend your existing request processing logic and create new modules responsible for these tasks. Here's a breakdown of what you should consider:

    New Parsing Module(s):

        MultipartParser.hpp / MultipartParser.cpp:
        Create these files (perhaps in a folder like srcs/utils or srcs/request) to encapsulate the logic for parsing multipart/form-data.

            Responsibilities:
            • Extract the boundary from the Content-Type header.
            • Read the request body and separate the parts based on the boundary.
            • Identify each part as either a form field or an uploaded file. • Parse headers and content for each part.

        FileUploadHandler.hpp / FileUploadHandler.cpp:
        Optionally, create a separate module dedicated to handling the uploaded files once they are parsed.

            Responsibilities:
            • Store file data to the destination specified in your configuration (using the upload path).
            • Manage file naming, temporary storage, and error handling (like when the file exceeds limits).

    Modifications in Existing Request Handling Logic:

        HTTP Request Processing Module:
        If you have an existing module (for example, something like RequestHandler.cpp within srcs/server) responsible for parsing HTTP requests, extend it to:

            Detect the Content-Type header. If it’s "multipart/form-data", invoke your new MultipartParser.

            For raw POST bodies, check the content-length against the maximum allowed size (as configured), and reject the request early (e.g., return a 413 Payload Too Large) if the limit is exceeded.

        Integration with Configuration:
        Ensure that your newly developed modules check against the max body size limit provided in your configuration (from your ServerConfig/LocationConfig). This helps you enforce file upload limits based on each route’s configuration.

    File Organization and Integration:

        Project Folders:
        Consider putting your new modules in dedicated folders—for instance:

            srcs/utils: For modules like MultipartParser and FileUploadHandler, where the logic isn’t tightly coupled with networking but handles data processing.

            srcs/server: If your request handler logic is already implemented here, you may integrate calls to these new modules directly in your request handling workflow.

        Error Handling & Logging:
        Ensure that your new modules provide robust error handling (throwing exceptions or returning error statuses) and logging if a file exceeds the allowed size or if there are parsing issues.

Summary:

    Create:
    • MultipartParser.hpp / MultipartParser.cpp
    • FileUploadHandler.hpp / FileUploadHandler.cpp (optional if you want a dedicated module)

    Modify:
    • The HTTP Request Processing module (likely in srcs/server/RequestHandler.cpp) to call the multipart parser when the request’s Content-Type indicates a file upload.
    • Ensure that your code checks against the client max body size defined in your configuration.

By separating concerns in this manner, you keep your code modular and maintainable, while successfully adding support for multipart/form-data parsing and file uploads to your web server.