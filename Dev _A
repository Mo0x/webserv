üë®‚Äçüíª Developer A: Low-Level Network & Core Server Architecture
1. Parse Configuration File (basic setup)

    Implement logic to read and validate the configuration file path.

    Parse core values like server blocks, ports, and basic error page paths.

    Make this accessible to the rest of the application.

2. Create Non-blocking Sockets and Bind to Ports

    Use socket(), bind(), listen() for TCP socket setup.

    Use fcntl() or similar to set sockets to non-blocking mode.

    Bind to multiple ports as defined in the config.

3. Implement poll/select/kqueue/epoll Loop

    Implement one I/O multiplexing method (poll recommended for portability).

    Centralize event handling (incoming connections, data to read, buffers to flush).

    Ensure the loop handles thousands of connections efficiently.

4. Accept and Manage Client Connections

    Accept new clients without blocking (accept() within the event loop).

    Store client connection metadata (IP, socket fd, timestamps, etc.).

    Maintain a per-client state (e.g. receiving headers, body, etc.).

5. Handle Disconnects and Socket I/O

    Detect when clients disconnect gracefully or unexpectedly.

    Free resources and remove their descriptors from poll().

6. Parse HTTP Requests (GET, POST, DELETE)

    Build an HTTP parser (state machine) to:

        Extract the request line, headers, and body.

        Handle chunked transfer-encoding.

        Detect malformed or oversized requests.

7. Support Chunked Body Parsing

    Reassemble chunked transfer-encoded bodies.

    Ensure bodies are unchunked before further processing (e.g., CGI).

8. Format HTTP Responses

    Compose response strings based on request outcome:

        Correct status codes (200 OK, 404 Not Found, etc.)

        Headers (Content-Length, Content-Type, etc.)

        Body content (HTML, static file, or CGI output)

9. Implement Default Error Pages

    Define and serve generic HTML templates for errors (e.g., 404, 500).

    Allow overrides via the config file.